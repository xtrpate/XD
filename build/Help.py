# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
from tkinter import Tk, Canvas, Button, PhotoImage, Label
import math  # <-- for rounded borders
import sys
import subprocess

# --- Get Fullname from Argument ---
user_id = None
fullname = "User" # Default
if len(sys.argv) > 1:
    try:
        user_id = int(sys.argv[1]) # Expect user_id as the first argument
    except ValueError:
        print("Warning: First argument should be user_id (integer).")
if len(sys.argv) > 2:
    fullname = sys.argv[2]

# --- Rounded Rectangle Function ---
def round_rectangle(canvas, x1, y1, x2, y2, r=15, **kwargs):
    points = [
        x1 + r, y1,
        x2 - r, y1,
        x2, y1,
        x2, y1 + r,
        x2, y2 - r,
        x2, y2,
        x2 - r, y2,
        x1 + r, y2,
        x1, y2,
        x1, y2 - r,
        x1, y1 + r,
        x1, y1
    ]
    return canvas.create_polygon(points, smooth=True, **kwargs)

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"D:\downloadss\New folder\Tkinter\Tkinter-Designer-master\build\assets\frame2")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

# --------- Rounded border helper (single polygon = smooth corners) ----------
def rounded_box(cnv, x1, y1, x2, y2, r=12, fill="#FFFFFF",
                outline="#000000", width=1):
    r = max(0, min(int(r), int(min(x2 - x1, y2 - y1) / 2)))
    pts = []

    def arc(cx, cy, a0, a1, step=6):
        step = step if a1 >= a0 else -step
        for a in range(a0, a1 + step, step):
            rad = math.radians(a)
            pts.extend([cx + r * math.cos(rad), cy + r * math.sin(rad)])

    # Top edge + top-right corner
    pts += [x1 + r, y1, x2 - r, y1]
    arc(x2 - r, y1 + r, 270, 360)
    # Right edge + bottom-right
    pts += [x2, y2 - r]
    arc(x2 - r, y2 - r, 0, 90)
    # Bottom edge + bottom-left
    pts += [x1 + r, y2]
    arc(x1 + r, y2 - r, 90, 180)
    # Left edge + top-left
    pts += [x1, y1 + r]
    arc(x1 + r, y1 + r, 180, 270)

    return cnv.create_polygon(pts, smooth=True, fill=fill,
                              outline=outline, width=width)

# --- Opens Sesame ---
def open_user_py():
    subprocess.Popen([sys.executable, "user.py", fullname])
    window.destroy()

def open_notification_py():
    subprocess.Popen([sys.executable, "Notification.py", fullname])
    window.destroy()

def open_prices_py():
    subprocess.Popen([sys.executable, "Prices.py", "Help.py", fullname])
    window.destroy()

def open_printer_py():
    subprocess.Popen([sys.executable, "printer.py", fullname])
    window.destroy()

def make_icon_clickable(widget, command):
    widget.bind("<Button-1>", lambda e: command())
    widget.bind("<Enter>", lambda e: window.config(cursor="hand2"))
    widget.bind("<Leave>", lambda e: window.config(cursor=""))

# --- Fonts (negative size = pixels, same behavior as Tkinter-Designer) ---
FONT_BTN     = ("Inter Bold", -16)
FONT_BTN_SM  = ("Inter Bold", -13)
FONT_BTN_MED = ("Inter Bold", -15)
WHITE = "#FFFFFF"
BLACK = "#000000"

window = Tk()
# --- Center the Window ---
window_width = 859
window_height = 534

# Get screen width and height
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

# Calculate x and y coordinates
x = int((screen_width / 2) - (window_width / 2))
y = int((screen_height / 2) - (window_height / 2))

# Set the new geometry
window.geometry(f"{window_width}x{window_height}+{x}+{y}")

window.geometry("871x540")
window.configure(bg="#FFF6F6")
window.title("Help")

canvas = Canvas(
    window, bg="#FFF6F6", height=540, width=871,
    bd=0, highlightthickness=0, relief="ridge"
)
canvas.place(x=0, y=0)

# ======= OUTER ROUNDED CONTAINER + HEADER =======
# outer rounded border that "sakop lahat"
rounded_box(canvas, 22.0, 23.0, 851.0, 527.0, r=0,
            fill=WHITE, outline=BLACK, width=2)

# header (black bar) with rounded corners
rounded_box(canvas, 22.0, 24.0, 851.0, 109.0, r=0,
            fill=BLACK, outline=BLACK, width=2)

# "Help" title (center)
canvas.create_text((-260.0 + 851.0) / 2, 66.0,
                   text="Help", fill=WHITE,
                   font=("Inter Bold", -40))

# left divider line
canvas.create_rectangle(239.0, 22.0, 240.0, 527.0, fill=BLACK, outline="")

# ======= CARDS WITH ROUNDED BORDERS (4 pcs) =======
# FAQ (top-left card)
rounded_box(canvas, 250.0, 118.0, 553.0, 283.0, r=14,
            fill=WHITE, outline=BLACK, width=1)

# Contact Support (top-right card)
rounded_box(canvas, 563.0, 118.0, 790.0, 256.0, r=14,
            fill=WHITE, outline=BLACK, width=1)

# User Guide (bottom-left card)
rounded_box(canvas, 250.0, 293.0, 553.0, 458.0, r=14,
            fill=WHITE, outline=BLACK, width=1)

# About System (bottom-right card)
rounded_box(canvas, 567.0, 270.0, 833.0, 499.0, r=14,
            fill=WHITE, outline=BLACK, width=1)

# ======= TEXT/ICONS INSIDE CARDS =======
canvas.create_text(605.0, 153.0, anchor="nw",
                   text="copycorner56@gmail.com",
                   fill=BLACK, font=("Inter Bold", -13))

# (icon on Contact Support – keep as canvas image)
image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
canvas.create_image(590.0, 163.0, image=image_image_3)
image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
canvas.create_image(589.0, 185.0, image=image_image_4)

canvas.create_text(580.0, 129.0, anchor="nw",
                   text="Contact Support", fill=BLACK, font=("Inter Bold", -16))
canvas.create_text(289.0, 129.0, anchor="nw",
                   text="Frequency Asked Questions", fill=BLACK, font=("Inter Bold", -16))
canvas.create_text(607.0, 176.0, anchor="nw",
                   text="09531948289", fill=BLACK, font=("Inter Bold", -13))

# FAQ bullets
canvas.create_text(263.0, 156.0, anchor="nw",
                   text="•How to create a print job?",
                   fill=BLACK, font=("Inter Bold", -14))
canvas.create_text(263.0, 178.0, anchor="nw",
                   text="•How to view my  past print jobs?",
                   fill=BLACK, font=("Inter Bold", -14))
canvas.create_text(263.0, 201.0, anchor="nw",
                   text="•How to know the price of printing?",
                   fill=BLACK, font=("Inter Bold", -14))
canvas.create_text(263.0, 223.0, anchor="nw",
                   text="•How can i edit my profile Information?",
                   fill=BLACK, font=("Inter Bold", -14))
canvas.create_text(263.0, 245.0, anchor="nw",
                   text="•Who can access  the admin features?",
                   fill=BLACK, font=("Inter Bold", -14))

# User Guide headings
canvas.create_text(310.0, 310.0, anchor="nw",
                   text="User Guide/Quick Start",
                   fill=BLACK, font=("Inter Bold", -16))

# little down arrow image
image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
canvas.create_image(399.0, 350.0, image=image_image_2)

# --- Reusable Rounded Menu Button ---
def create_rounded_menu_button(canvas, x, y, w, h, text, command=None):
    rect = round_rectangle(canvas, x, y, x + w, y + h, r=10, fill="#FFFFFF", outline="#000000", width=1)
    txt = canvas.create_text(x + 35, y + 10, text=text, anchor="nw", fill="#000000", font=("Inter Bold", 15))

    def on_click(event):
        if command:
            command()

    def on_hover(event):
        canvas.itemconfig(rect, fill="#E8E8E8")
        canvas.config(cursor="hand2")

    def on_leave(event):
        canvas.itemconfig(rect, fill="#FFFFFF")
        canvas.config(cursor="")

    for tag in (rect, txt):
        canvas.tag_bind(tag, "<Button-1>", on_click)
        canvas.tag_bind(tag, "<Enter>", on_hover)
        canvas.tag_bind(tag, "<Leave>", on_leave)

# --- Left Menu Buttons ---
create_rounded_menu_button(canvas, 46, 129, 161, 38, "Profile", open_user_py)
create_rounded_menu_button(canvas, 46, 178, 161, 38, "Print Request", open_printer_py)
create_rounded_menu_button(canvas, 46, 227, 161, 38, "Pricelist", open_prices_py)
create_rounded_menu_button(canvas, 46, 276, 161, 38, "Notification", open_notification_py)


# button_image_2 = PhotoImage(file=relative_to_assets("button_2.png"))
# button_2 = Button(window, image=button_image_2, borderwidth=0, highlightthickness=0,
#                   command=lambda: print("Edit Profile clicked"), relief="flat")
# button_2.place(x=73.0, y=134.0, width=151.0, height=38.0)
# button_2.configure(text="  Edit Profile", compound="center", fg=BLACK, font=FONT_BTN, command=open_user_py)
#
# button_image_3 = PhotoImage(file=relative_to_assets("button_3.png"))
# button_3 = Button(window, image=button_image_3, borderwidth=0, highlightthickness=0,
#                   command=lambda: print("Print Request clicked"), relief="flat")
# button_3.place(x=73.0, y=185.0, width=151.0, height=38.0)
# button_3.configure(text="    Print Request", compound="center", fg=BLACK, font=FONT_BTN, command=open_printer_py)
#
# button_image_4 = PhotoImage(file=relative_to_assets("button_4.png"))
# button_4 = Button(window, image=button_image_4, borderwidth=0, highlightthickness=0,
#                   command=lambda: print("Notifications clicked"), relief="flat")
# button_4.place(x=73.0, y=234.0, width=151.0, height=38.0)
# button_4.configure(text="   Notifications", compound="center", fg=BLACK, font=FONT_BTN, command=open_notification_py)
#
# button_image_5 = PhotoImage(file=relative_to_assets("button_5.png"))
# button_5 = Button(window, image=button_image_5, borderwidth=0, highlightthickness=0,
#                   command=lambda: print("Pricelist clicked"), relief="flat")
# button_5.place(x=73.0, y=282.0, width=151.0, height=38.0)
# button_5.configure(text="Pricelist", compound="center", fg=BLACK, font=FONT_BTN, command=open_prices_py)

button_image_7 = PhotoImage(file=relative_to_assets("button_7.png"))
button_7 = Button(window, image=button_image_7, borderwidth=0, highlightthickness=0,
                  command=lambda: print("Report a Problem clicked"), relief="flat")
button_7.place(x=590.0, y=209.0, width=165.0, height=33.0)
button_7.configure(text="Report a Problem", compound="center", fg=WHITE, font=FONT_BTN_SM)

button_image_8 = PhotoImage(file=relative_to_assets("button_8.png"))
button_8 = Button(window, image=button_image_8, borderwidth=0, highlightthickness=0,
                  command=lambda: print("Manual clicked"), relief="flat")
button_8.place(x=289.0, y=367.0, width=221.0, height=64.0)
button_8.configure(text="View Full User Manual(PDF)",
                   compound="center", fg=WHITE, font=FONT_BTN_MED)

# ======= About System texts =======
canvas.create_text(578.0, 380.0, anchor="nw",
                   text="Johnnnnyyyy Sisisins", fill=BLACK, font=("Inter Bold", -16))
canvas.create_text(580.0, 310.0, anchor="nw",
                   text="Copy Corner Printing & \nInventory System",
                   fill=BLACK, font=("Inter", -16))
canvas.create_text(580.0, 283.0, anchor="nw",
                   text="About System", fill=BLACK, font=("Inter Bold", -16))
canvas.create_text(580.0, 356.0, anchor="nw",
                   text="Version 1.0", fill=BLACK, font=("Inter", -16))
canvas.create_text(580.0, 402.0, anchor="nw",
                   text=("A simple system to manage  \nprinting jobs, customers and\n"
                         " inventory for copy corner,\n Includes sales and stock ."),
                   fill=BLACK, font=("Inter", -16))

# ======= LEFT ICONS AS LABELS (so they sit ABOVE the buttons) =======
icon_edit   = PhotoImage(file=relative_to_assets("account.png"))
icon_pr     = PhotoImage(file=relative_to_assets("image_6.png"))
icon_bell   = PhotoImage(file=relative_to_assets("image_8.png"))
icon_sheet  = PhotoImage(file=relative_to_assets("image_7.png"))

lbl_edit  = Label(window, image=icon_edit,  bg=WHITE, bd=0)
lbl_pr    = Label(window, image=icon_pr,    bg=WHITE, bd=0)
lbl_bell  = Label(window, image=icon_bell,  bg=WHITE, bd=0)
lbl_sheet = Label(window, image=icon_sheet, bg=WHITE, bd=0)

lbl_edit.place(x=64.0, y=148.0, anchor="center")
lbl_pr.place(x=64.0, y=198.0, anchor="center")
lbl_bell.place(x=64.0, y=248.0, anchor="center")
lbl_sheet.place(x=64.0, y=298.0, anchor="center")

make_icon_clickable(lbl_edit, open_user_py)
make_icon_clickable(lbl_pr, open_printer_py)
make_icon_clickable(lbl_sheet, open_prices_py)
make_icon_clickable(lbl_bell, open_notification_py)

window.resizable(False, False)
window.mainloop()