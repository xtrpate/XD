# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import sys
import subprocess
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox, ttk
import tkinter as tk


def fetch_print_jobs():
    import mysql.connector
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",  # change if needed
            password="",  # add your password if any
            database="copy_corner_db"
        )
        cursor = conn.cursor(dictionary=True)
        query = """
            SELECT 
                pj.job_id, 
                u.username, 
                f.file_id,
                f.file_name,
                f.file_type,
                pj.pages, 
                pj.paper_size,
                pj.color_option, 
                pj.copies, 
                pj.payment_method, 
                pj.total_amount,
                pj.status, 
                pj.notes, 
                pj.created_at
            FROM print_jobs pj
            LEFT JOIN users u ON pj.user_id = u.user_id
            LEFT JOIN files f ON pj.file_id = f.file_id
            ORDER BY pj.created_at DESC
        """
        cursor.execute(query)
        rows = cursor.fetchall()
        cursor.close()
        conn.close()
        return rows
    except mysql.connector.Error as err:
        print(f"Database Error: {err}")
        return []


def display_print_jobs(canvas):
    """
    Fetches print job data from database and displays it
    in the Canvas table area.
    """
    jobs = fetch_print_jobs()
    canvas.delete("job_row")

    y_position = 194  # starting Y coordinate for first row
    job_widgets = []  # keep track of row item IDs

    for index, job in enumerate(jobs):
        job_id = job["job_id"]
        username = job["username"] or "-"
        file_id = job["file_id"] or "-"
        pages = job["pages"] or "-"
        size = job["paper_size"] or "-"
        color_option = job["color_option"] or "-"
        if color_option == "Black & White":
            color = "B&W"
        elif color_option == "Color":
            color = "C"
        else:
            color = color_option
        status_text = job["status"] or "-"
        if status_text == "Pending":
            status = "P"
        elif status_text == "Approved":
            status = "A"
        else:
            status = "V"

        submitted = (
            job["created_at"].strftime("%m/%d/%y %H:%M")
            if job["created_at"]
            else "-"
        )

        # Combine all row text items with a shared tag per row
        row_tag = f"row_{index}"

        row_items = [
            canvas.create_text(261, y_position, text=f"#{job_id}", fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag)),
            canvas.create_text(307, y_position, text=username, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag)),
            canvas.create_text(385, y_position, text=(job["file_name"] or f"File {file_id}"), fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag)),
            canvas.create_text(430, y_position, text=pages, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag)),
            canvas.create_text(465, y_position, text=size, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag)),
            canvas.create_text(502, y_position, text=color, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag)),
            canvas.create_text(536, y_position, text=status, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag)),
            canvas.create_text(575, y_position, text=submitted, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag)),
        ]

        job_widgets.append(row_items)
        y_position += 25

    enable_job_selection(canvas, jobs)


def enable_job_selection(canvas, jobs):
    """Enable clicking and hovering on rows."""
    selected_box = [None]
    selected_job = [None]

    def highlight_row(index, color):
        """Draw a background rectangle for hover or selection."""
        y = 194 + (index * 25)
        if selected_box[0]:
            canvas.delete(selected_box[0])
        selected_box[0] = canvas.create_rectangle(
            255, y - 2, 650, y + 20,
            fill=color, outline=color, tags="highlight"
        )
        canvas.tag_lower(selected_box[0])

    def on_enter(event):
        clicked = canvas.find_withtag("current")
        if not clicked:
            return
        tags = canvas.gettags(clicked[0])
        for t in tags:
            if t.startswith("row_"):
                index = int(t.split("_")[1])
                highlight_row(index, "#E0F0FF")
                canvas.config(cursor="hand2")  # pointer cursor
                return

    def on_leave(event):
        canvas.config(cursor="")
        if selected_job[0] is None:
            canvas.delete("highlight")

    def on_click(event):
        clicked = canvas.find_withtag("current")
        if not clicked:
            return
        tags = canvas.gettags(clicked[0])
        for t in tags:
            if t.startswith("row_"):
                index = int(t.split("_")[1])
                selected_job[0] = jobs[index]
                highlight_row(index, "#CCE5FF")
                update_job_details(canvas, jobs[index])
                selected_job[0] = jobs[index]
                return



    # Bind events
    canvas.tag_bind("job_row", "<Enter>", on_enter)
    canvas.tag_bind("job_row", "<Leave>", on_leave)
    canvas.tag_bind("job_row", "<Button-1>", on_click)

    add_print_job_buttons(canvas, selected_job)

def filter_print_jobs(canvas, username_filter, status_filter):
    import mysql.connector
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="copy_corner_db"
        )
        cursor = conn.cursor(dictionary=True)

        query = """
            SELECT 
                pj.job_id, 
                u.username, 
                f.file_id,
                f.file_name,
                f.file_type,
                pj.pages, 
                pj.paper_size,
                pj.color_option, 
                pj.copies, 
                pj.payment_method, 
                pj.total_amount,
                pj.status, 
                pj.notes, 
                pj.created_at
            FROM print_jobs pj
            LEFT JOIN users u ON pj.user_id = u.user_id
            LEFT JOIN files f ON pj.file_id = f.file_id
            WHERE 1=1
        """

        params = []

        if username_filter:
            query += " AND u.username LIKE %s"
            params.append(f"%{username_filter}%")

        if status_filter and status_filter != "All":
            query += " AND pj.status = %s"
            params.append(status_filter)

        query += " ORDER BY pj.created_at DESC"
        cursor.execute(query, params)
        rows = cursor.fetchall()

        cursor.close()
        conn.close()

        canvas.delete("job_row")
        y_position = 194

        for index, job in enumerate(rows):
            job_id = job["job_id"]
            username = job["username"] or "-"
            file_id = job["file_id"] or "-"
            pages = job["pages"] or "-"
            size = job["paper_size"] or "-"
            color_option = job["color_option"] or "-"
            color = "B&W" if color_option == "Black & White" else "C" if color_option == "Color" else color_option
            status_text = job["status"] or "-"
            status = {
                "Pending": "P",
                "Approved": "A",
                "Voided": "V",
                "Completed": "C"
            }.get(status_text, status_text)
            submitted = (
                job["created_at"].strftime("%m/%d/%y %H:%M") if job["created_at"] else "-"
            )

            row_tag = f"row_{index}"

            canvas.create_text(261, y_position, text=f"#{job_id}", fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag))
            canvas.create_text(307, y_position, text=username, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag))
            canvas.create_text(385, y_position, text=(job["file_name"] or f"File {file_id}"), fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag))
            canvas.create_text(430, y_position, text=pages, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag))
            canvas.create_text(465, y_position, text=size, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag))
            canvas.create_text(502, y_position, text=color, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag))
            canvas.create_text(536, y_position, text=status, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag))
            canvas.create_text(575, y_position, text=submitted, fill="#000000",
                               font=("Inter Bold", 12 * -1), anchor="nw", tags=("job_row", row_tag))
            y_position += 25

        enable_job_selection(canvas, rows)

    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error while filtering:\n{err}")


def update_job_details(canvas, job):
    """Display job info on the right-side detail area."""
    canvas.delete("job_details")

    detail_texts = [
        f"Req ID: #{job['job_id']}",
        f"User: {job['username'] or '-'}",
        f"File: {job['file_name'] or '-'}",
        f"Pages: {job['pages'] or '-'}",
        f"Status: {job['status'] or '-'}",
        f"Submitted: {job['created_at'].strftime('%Y-%m-%d %H:%M') if job['created_at'] else '-'}",
    ]

    y = 132
    for line in detail_texts:
        canvas.create_text(
            740, y, text=line, anchor="nw",
            fill="#000000", font=("Inter", 11),
            tags="job_details"
        )
        y += 18


def add_print_job_buttons(canvas, selected_job_ref):
    """Make the right-side action buttons interactive."""

    def change_status(new_status):
        """Approve or Void the selected job and update DB + UI."""
        import mysql.connector
        job = selected_job_ref[0]
        if not job:
            messagebox.showwarning("No Selection", "Please select a job first.")
            return

        try:
            conn = mysql.connector.connect(
                host="localhost",
                user="root",
                password="",
                database="copy_corner_db"
            )
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE print_jobs SET status = %s WHERE job_id = %s",
                (new_status, job["job_id"])
            )
            conn.commit()
            cursor.close()
            conn.close()

            # Update local data and UI instantly
            job["status"] = new_status
            update_job_details(canvas, job)
            display_print_jobs(canvas)
            messagebox.showinfo("Success", f"Request marked as {new_status}.")

        except mysql.connector.Error as err:
            messagebox.showerror("Database Error", f"Error updating status:\n{err}")

    # def download_file():
    #     job = selected_job_ref[0]
    #     if not job:
    #         messagebox.showwarning("No Selection", "Please select a job first.")
    #         return
    #     messagebox.showinfo("Download", f"Downloading file for Job #{job['job_id']}...")

    def download_file():
        import mysql.connector
        import os
        import shutil
        from tkinter import filedialog

        job = selected_job_ref[0]
        if not job:
            messagebox.showwarning("No Selection", "Please select a job first.")
            return

        try:
            conn = mysql.connector.connect(
                host="localhost",
                user="root",
                password="",
                database="copy_corner_db"
            )
            cursor = conn.cursor(dictionary=True)
            cursor.execute("SELECT file_name, file_path FROM files WHERE file_id = %s", (job["file_id"],))
            file_record = cursor.fetchone()
            cursor.close()
            conn.close()

            if not file_record:
                messagebox.showerror("Error", "File record not found in the database.")
                return

            file_name = file_record["file_name"]
            file_path = file_record["file_path"]

            if not os.path.exists(file_path):
                messagebox.showerror("Error", f"File not found: {file_path}")
                return

            # Ask user where to save the file
            save_path = filedialog.asksaveasfilename(
                initialfile=file_name,
                title="Save File As",
                defaultextension="",
                filetypes=[("All Files", "*.*")]
            )

            if save_path:
                shutil.copy(file_path, save_path)
                messagebox.showinfo("Download Complete", f"File saved to:\n{save_path}")

        except mysql.connector.Error as err:
            messagebox.showerror("Database Error", f"Error accessing file:\n{err}")
        except Exception as e:
            messagebox.showerror("Error", f"Unexpected error:\n{e}")

    def start_print():
        job = selected_job_ref[0]
        if not job:
            messagebox.showwarning("No Selection", "Please select a job first.")
            return
        messagebox.showinfo("Start Print", f"Starting print for Job #{job['job_id']}...")

    def message_user():
        job = selected_job_ref[0]
        if not job:
            messagebox.showwarning("No Selection", "Please select a job first.")
            return
        messagebox.showinfo("Message", f"Opening chat with {job['username']}...")

    # Helper to bind clickable areas on canvas
    def make_clickable(x1, y1, x2, y2, command):
        rect_id = canvas.create_rectangle(x1, y1, x2, y2, outline="", fill="", tags="btn_area")

        def on_hover(event): window.config(cursor="hand2")

        def on_leave(event): window.config(cursor="")

        canvas.tag_bind(rect_id, "<Button-1>", lambda e: command())
        canvas.tag_bind(rect_id, "<Enter>", on_hover)
        canvas.tag_bind(rect_id, "<Leave>", on_leave)

    # Approve
    make_clickable(671, 335, 834, 366, lambda: change_status("Approved"))
    # Start Print
    make_clickable(671, 372, 834, 403, start_print)
    # Void
    make_clickable(672, 409, 835, 440, lambda: change_status("Voided"))
    # Download File
    make_clickable(671, 446, 834, 477, download_file)
    # Message User
    make_clickable(672, 483, 835, 514, message_user)


# --- Sidebar Buttons with Navigation ---
def open_admin_user():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_user.py"])


def open_admin_dashboard():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_dashboard.py"])


def open_admin_report():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_report.py"])


def open_admin_notification():
    window.destroy()
    subprocess.Popen([sys.executable, "admin_notification.py"])


def round_rectangle(canvas, x1, y1, x2, y2, r=15, **kwargs):
    points = [
        x1 + r, y1, x2 - r, y1, x2, y1, x2, y1 + r,
        x2, y2 - r, x2, y2, x2 - r, y2, x1 + r, y2,
        x1, y2, x1, y2 - r, x1, y1 + r, x1, y1
    ]
    return canvas.create_polygon(points, smooth=True, **kwargs)


def create_rounded_menu_button(canvas, x, y, w, h, text, command=None):
    rect = round_rectangle(canvas, x, y, x + w, y + h, r=10, fill="#FFFFFF", outline="#000000", width=1)
    txt = canvas.create_text(x + 25, y + 8, text=text, anchor="nw", fill="#000000", font=("Inter Bold", 15))

    def on_click(event):
        if command:
            command()

    def on_hover(event):
        canvas.itemconfig(rect, fill="#E8E8E8")
        window.config(cursor="hand2")

    def on_leave(event):
        canvas.itemconfig(rect, fill="#FFFFFF")
        window.config(cursor="")

    for tag in (rect, txt):
        canvas.tag_bind(tag, "<Button-1>", on_click)
        canvas.tag_bind(tag, "<Enter>", on_hover)
        canvas.tag_bind(tag, "<Leave>", on_leave)


# --- Logout Function ---
def logout():
    messagebox.showinfo("Logged Out", "Logout successful!")
    subprocess.Popen([sys.executable, "login.py"])
    window.destroy()


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"D:\downloadss\New folder\Tkinter\Tkinter-Designer-master\build\assets\frame4")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window_width = 905
window_height = 570

screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
x = int((screen_width / 2) - (window_width / 2))
y = int((screen_height / 2) - (window_height / 2))
window.geometry(f"{window_width}x{window_height}+{x}+{y}")
window.configure(bg="#FFFFFF")
window.title("Admin Print Jobs")

canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=570,
    width=894,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
canvas.create_rectangle(
    33.0,
    31.0,
    863.0,
    535.0,
    fill="#FFFFFF",
    outline="#000000")

# canvas.create_text(
#     334.0,
#     194.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# canvas.create_text(
#     392.0,
#     194.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# canvas.create_text(
#     435.0,
#     194.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# canvas.create_text(
#     471.0,
#     194.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# canvas.create_text(
#     509.0,
#     194.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# canvas.create_text(
#     552.0,
#     194.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# canvas.create_text(
#     615.0,
#     194.0,
#     anchor="nw",
#     text="-",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )

# canvas.create_text(
#     261.0,
#     196.0,
#     anchor="nw",
#     text="#",
#     fill="#000000",
#     font=("Inter Bold", 12 * -1)
# )

canvas.create_text(
    465.0,
    167.0,
    anchor="nw",
    text="Size",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    497.0,
    167.0,
    anchor="nw",
    text="Color",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    536.0,
    167.0,
    anchor="nw",
    text="Status",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    588.0,
    167.0,
    anchor="nw",
    text="Submitted",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    385.0,
    167.0,
    anchor="nw",
    text="File",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    420.0,
    167.0,
    anchor="nw",
    text="Pages",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    307.0,
    167.0,
    anchor="nw",
    text="Username",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    272.0,
    40.0,
    anchor="nw",
    text="Print Jobs Management",
    fill="#000000",
    font=("Inter Bold", 32 * -1)
)

canvas.create_rectangle(
    41.0,
    39.0,
    244.0,
    527.0,
    fill="#FFFFFF",
    outline="")


# --- Sidebar Buttons ---
def create_rounded_menu_button(canvas, x, y, w, h, text, command=None):
    rect = round_rectangle(canvas, x, y, x + w, y + h, r=10, fill="#FFFFFF", outline="#000000", width=1)
    txt = canvas.create_text(x + 25, y + 8, text=text, anchor="nw", fill="#000000", font=("Inter Bold", 15))

    def on_click(event):
        if command:
            command()

    def on_hover(event):
        canvas.itemconfig(rect, fill="#E8E8E8")
        window.config(cursor="hand2")

    def on_leave(event):
        canvas.itemconfig(rect, fill="#FFFFFF")
        window.config(cursor="")

    for tag in (rect, txt):
        canvas.tag_bind(tag, "<Button-1>", on_click)
        canvas.tag_bind(tag, "<Enter>", on_hover)
        canvas.tag_bind(tag, "<Leave>", on_leave)


create_rounded_menu_button(canvas, 74, 170, 151, 38, "Dashboard", open_admin_dashboard)
create_rounded_menu_button(canvas, 74, 226, 151, 38, "User", open_admin_user)
create_rounded_menu_button(canvas, 74, 283, 151, 38, "Reports", open_admin_report)
create_rounded_menu_button(canvas, 74, 340, 151, 38, "Notifications", open_admin_notification)
create_rounded_menu_button(canvas, 74, 397, 151, 38, "Settings")
create_rounded_menu_button(canvas, 97, 473, 111, 38, "Logout", logout)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    143.0,
    79.0,
    image=image_image_1
)
#
# button_image_1 = PhotoImage(
#     file=relative_to_assets("button_1.png"))
# button_1 = Button(
#     image=button_image_1,
#     text="Logout",
#     compound="center",
#     font=("Inter Bold", 16),
#     fg="#000000",
#
#     borderwidth=0,
#     highlightthickness=0,
#     command=lambda: print("button_1 clicked"),
#     relief="flat"
# )
# button_1.place(
#     x=97.0,
#     y=453.0,
#     width=91.0,
#     height=41.0
# )
#
# canvas.create_text(
#     115.0,
#     464.0,
#     anchor="nw",
#     text="Logout",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# button_image_2 = PhotoImage(
#     file=relative_to_assets("button_2.png"))
# button_2 = Button(
#     image=button_image_2,
#     text="Settings",
#     compound="center",
#     font=("Inter Bold", 16),
#     fg="#000000",
#     borderwidth=0,
#     highlightthickness=0,
#     command=lambda: print("button_2 clicked"),
#     relief="flat"
# )
# button_2.place(
#     x=64.0,
#     y=390.0,
#     width=158.0,
#     height=41.0
# )
#
# canvas.create_text(
#     110.0,
#     401.0,
#     anchor="nw",
#     text="Settings",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# button_image_3 = PhotoImage(
#     file=relative_to_assets("button_3.png"))
# button_3 = Button(
#     image=button_image_3,
#     text="Notification",
#     compound="center",
#     font=("Inter Bold", 16),
#     fg="#000000",
#     borderwidth=0,
#     highlightthickness=0,
#     command=lambda: print("button_3 clicked"),
#     relief="flat"
# )
# button_3.place(
#     x=64.0,
#     y=333.0,
#     width=158.0,
#     height=41.0
# )
#
# button_image_4 = PhotoImage(
#     file=relative_to_assets("button_4.png"))
# button_4 = Button(
#     image=button_image_4,
#     text="Reports",
#     compound="center",
#     font=("Inter Bold", 16),
#     fg="#000000",
#     borderwidth=0,
#     highlightthickness=0,
#     command=lambda: print("button_4 clicked"),
#     relief="flat"
# )
# button_4.place(
#     x=64.0,
#     y=276.0,
#     width=158.0,
#     height=41.0
# )
#
# canvas.create_text(
#     112.0,
#     287.0,
#     anchor="nw",
#     text="Reports",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# canvas.create_text(
#     92.0,
#     344.0,
#     anchor="nw",
#     text="Notifications",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# button_image_5 = PhotoImage(
#     file=relative_to_assets("button_5.png"))
# button_5 = Button(
#     image=button_image_5,
#     text="User",
#     compound="center",
#     font=("Inter Bold", 16),
#     fg="#000000",
#     borderwidth=0,
#     highlightthickness=0,
#     command=lambda: print("button_5 clicked"),
#     relief="flat"
# )
# button_5.place(
#     x=64.0,
#     y=219.0,
#     width=158.0,
#     height=41.0
# )
#
# canvas.create_text(
#     103.0,
#     231.0,
#     anchor="nw",
#     text="Print Jobs",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )
#
# button_image_6 = PhotoImage(
#     file=relative_to_assets("button_6.png"))
# button_6 = Button(
#     image=button_image_6,
#     text="Dashboard",
#     compound="center",
#     font=("Inter Bold", 16),
#     fg="#000000",
#     borderwidth=0,
#     highlightthickness=0,
#     command=lambda: print("button_6 clicked"),
#     relief="flat"
# )
# button_6.place(
#     x=64.0,
#     y=163.0,
#     width=158.0,
#     height=41.0
# )
#
# canvas.create_text(
#     124.0,
#     174.0,
#     anchor="nw",
#     text="User",
#     fill="#000000",
#     font=("Inter Bold", 16 * -1)
# )

canvas.create_text(
    117.0,
    130.0,
    anchor="nw",
    text="ADMIN",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    258.0,
    32.0,
    258.0,
    536.0,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    660.0,
    79.0,
    846.0,
    527.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_rectangle(
    260.0,
    86.0,
    657.0,
    138.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    269.0,
    86.0,
    anchor="nw",
    text="Search Username:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)
#filter
# canvas.create_rectangle(
#     588.0,
#     101.0,
#     646.0,
#     132.0,
#     fill="#FFFFFF",
#     outline="#000000")

canvas.create_rectangle(
    482.0,
    101.0,
    579.0,
    132.0,
    fill="#FFFFFF",
    outline="#000000")
#approve
canvas.create_rectangle(
    671.0,
    335.0,
    834.0,
    366.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    722.0,
    340.0,
    anchor="nw",
    text="Approve",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)
#start print
canvas.create_rectangle(
    671.0,
    372.0,
    834.0,
    403.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    716.0,
    379.0,
    anchor="nw",
    text="Start Print",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)
#void
canvas.create_rectangle(
    672.0,
    409.0,
    835.0,
    440.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    737.0,
    416.0,
    anchor="nw",
    text="Void",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)
#download file
canvas.create_rectangle(
    671.0,
    446.0,
    834.0,
    477.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    702.0,
    453.0,
    anchor="nw",
    text="Download File",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)
#message user
canvas.create_rectangle(
    672.0,
    483.0,
    835.0,
    514.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    701.0,
    490.0,
    anchor="nw",
    text="Message User",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_text(
    493.0,
    109.0,
    anchor="nw",
    text="All",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)
#search bar
canvas.create_rectangle(
    297.0,
    101.0,
    456.0,
    132.0,
    fill="#FFFFFF",
    outline="#000000")

canvas.create_text(
    462.0,
    86.0,
    anchor="nw",
    text="Status:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

# canvas.create_text(
#     603.0,
#     109.0,
#     anchor="nw",
#     text="Filter",
#     fill="#000000",
#     font=("Inter Bold", 12 * -1)
# )

canvas.create_text(
    677.0,
    94.0,
    anchor="nw",
    text="Selected Job Details",
    fill="#000000",
    font=("Inter Bold", 15 * -1)
)

canvas.create_rectangle(
    257.0,
    183.0,
    659.9999093967635,
    185.03875948724686,
    fill="#000000",
    outline="#000000")

canvas.create_text(
    261.0,
    167.0,
    anchor="nw",
    text="Req ID",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    132.0,
    anchor="nw",
    text="Req ID:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    150.0,
    anchor="nw",
    text="User:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    168.0,
    anchor="nw",
    text="File:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    186.0,
    anchor="nw",
    text="Pages:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    204.0,
    anchor="nw",
    text="Status:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    666.0,
    222.0,
    anchor="nw",
    text="Submitted:",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    671.0,
    246.0,
    anchor="nw",
    text="Admin Notes/Reason if voided",
    fill="#000000",
    font=("Inter Bold", 11 * -1)
)
#notes
canvas.create_rectangle(
    666.0,
    262.0,
    841.0,
    318.0,
    fill="#FFFFFF",
    outline="#000000")
display_print_jobs(canvas)

# --- Search Box (Username or File) ---
search_entry = Entry(
    window,
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    font=("Inter", 11)
)
search_entry.place(x=303, y=105, width=150, height=22)

# --- Status Dropdown ---
status_var = tk.StringVar(value="All")
status_dropdown = ttk.Combobox(
    window,
    textvariable=status_var,
    values=["All", "Pending", "Approved", "Voided", "Completed"],
    state="readonly",
    font=("Inter", 11)
)
status_dropdown.place(x=485, y=105, width=85, height=22)


# --- Filter Button ---
def on_filter_click():
    """Gets values from search and status, then calls filter_print_jobs."""
    username = search_entry.get().strip()
    status = status_var.get().strip()
    filter_print_jobs(canvas, username, status)

# --- Create rounded filter button on canvas ---

# 1. Define coordinates for the button
x1, y1 = 590, 103
width, height = 55, 25
x2, y2 = x1 + width, y1 + height

# 2. Draw the rounded rectangle
filter_rect = round_rectangle(
    canvas, x1, y1, x2, y2, r=5,  # Using a smaller radius (r=5)
    fill="#FFFFFF", outline="#000000", width=1,
    tags="filter_btn_canvas"  # A tag to group all parts
)

# 3. Draw the text (centered)
filter_txt = canvas.create_text(
    x1 + (width / 2),  # center x
    y1 + (height / 2),  # center y
    text="Filter",
    fill="#000000",
    font=("Inter Bold", 11),
    tags="filter_btn_canvas"  # Same tag
)

# 4. Define hover/leave/click behavior
def on_filter_hover(event):
    canvas.itemconfig(filter_rect, fill="#E8E8E8")  # Change rect color
    window.config(cursor="hand2")

def on_filter_leave(event):
    canvas.itemconfig(filter_rect, fill="#FFFFFF")  # Change rect color back
    window.config(cursor="")

# 5. Bind events to *all* parts of the button using the tag
canvas.tag_bind("filter_btn_canvas", "<Button-1>", lambda e: on_filter_click())
canvas.tag_bind("filter_btn_canvas", "<Enter>", on_filter_hover)
canvas.tag_bind("filter_btn_canvas", "<Leave>", on_filter_leave)

window.resizable(False, False)
window.mainloop()
